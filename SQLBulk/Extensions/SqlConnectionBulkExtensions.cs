using Microsoft.Data.SqlClient;
using Microsoft.Data.SqlClient.Server;
using SQLBulk.Options;
using SQLBulk.QueryBuilders;
using SQLBulk.Utils;
using SQLBulk.Validators;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;

namespace SQLBulk.Extensions
{
    public static class SqlConnectionBulkExtensions
    {
        internal static void BulkInsertSqlServer<T>(this SqlConnection connection, ICollection<T> items, BulkOptions bulkOptions = null)
        {
            if (!items.Any())
            {
                return;
            }
            using (var bulkCopy = GetBulkCopy(connection, items, bulkOptions))
            using (var dataTable = DataTableUtils.GetDataTable(items))
            {
                bulkCopy.WriteToServer(dataTable);
            }
        }

        internal async static Task BulkInsertSqlServerAsync<T>(this SqlConnection connection, ICollection<T> items, BulkOptions bulkOptions = null)
        {
            if (!items.Any())
            {
                return;
            }
            using (var bulkCopy = GetBulkCopy(connection, items, bulkOptions))
            using (var dataTable = DataTableUtils.GetDataTable(items))
            {
                await bulkCopy.WriteToServerAsync(dataTable);
            }
        }

        private static SqlBulkCopy GetBulkCopy<T>(SqlConnection connection, ICollection<T> items, BulkOptions bulkOptions = null)
        {
            InputValidator.ValidateItems(items);
            if (bulkOptions == null)
            {
                bulkOptions = new BulkOptions();
            }

            string destinationTableName = !string.IsNullOrWhiteSpace(bulkOptions.DestinationTableName) ? bulkOptions.DestinationTableName : typeof(T).GetTableName();
            var bulkCopy = GetNewSqlBulkCopy(connection, destinationTableName, bulkOptions.SqlBulkCopyTimeoutInSeconds);
            var properties = typeof(T)
                .GetProperties()
                .Where(e => !e.Ignore())
                .ToArray();

            var primaryKeys = bulkOptions.PrimaryKeys != null && bulkOptions.PrimaryKeys.Any() ? bulkOptions.PrimaryKeys : typeof(T).GetPrimaryKeys();
            foreach (var pk in primaryKeys)
            {
                if (pk.AutoGenerated)
                {
                    properties = properties
                        .Where(p => p.GetPrimaryKeyName() != pk.ColumnName)
                        .ToArray();
                }
            }
            foreach (var prop in properties)
            {
                var columnName = prop.GetColumnName();
                bulkCopy.ColumnMappings.Add(columnName, columnName);
            }
            if (bulkOptions.BatchSize != 0)
            {
                bulkCopy.BatchSize = bulkOptions.BatchSize;
            }
            return bulkCopy;
        }

        public static void BulkUpdateSqlServer<T>(this SqlConnection connection, ICollection<T> items, UpdateBulkOptions bulkOptions)
        {
            if (!items.Any())
            {
                return;
            }
            string destinationTableName = !string.IsNullOrWhiteSpace(bulkOptions.DestinationTableName) ? bulkOptions.DestinationTableName : typeof(T).GetTableName();
            string tempTableName = CreateTempTable(connection, destinationTableName);
            try
            {
                string query = GetUpdateMergeQuery<T>(destinationTableName, tempTableName, bulkOptions);
                bulkOptions.DestinationTableName = tempTableName;
                connection.ExecuteBulkCommand(items, query, bulkOptions);
            }
            finally
            {
                DropTempTable(connection, tempTableName);
            }
        }

        public static async Task BulkUpdateSqlServerAsync<T>(this SqlConnection connection, ICollection<T> items, UpdateBulkOptions bulkOptions)
        {
            if (!items.Any())
            {
                return;
            }
            string destinationTableName = !string.IsNullOrWhiteSpace(bulkOptions.DestinationTableName) ? bulkOptions.DestinationTableName : typeof(T).GetTableName();
            string tempTableName = await CreateTempTableAsync(connection, destinationTableName);
            try
            {
                string query = GetUpdateMergeQuery<T>(destinationTableName, tempTableName, bulkOptions);
                bulkOptions.DestinationTableName = tempTableName;
                await connection.ExecuteBulkCommandAsync(items, query, bulkOptions);
            }
            finally
            {
                await DropTempTableAsync(connection, tempTableName);
            }
        }

        private static string GetUpdateMergeQuery<T>(string destinationTableName, string tempTableName, UpdateBulkOptions bulkOptions)
        {
            return MergeQueryBuilder
                .StartBuilding()
                .SetColumnNames(typeof(T).GetColumnNames())
                .SetDestinationTable(destinationTableName)
                .SetSourceTable(tempTableName)
                .SetMatchOn(bulkOptions.MatchOnColumnNames)
                .SetCustomMatchExpression(bulkOptions.CustomMergeCondition)
                .Build();
        }

        public static void BulkInsertOrUpdateSqlServer<T>(this SqlConnection connection, ICollection<T> items, UpdateBulkOptions bulkOptions)
        {
            if(!items.Any())
            {
                return;
            }
            string destinationTableName = !string.IsNullOrWhiteSpace(bulkOptions.DestinationTableName) ? bulkOptions.DestinationTableName : typeof(T).GetTableName();
            string tempTableName = CreateTempTable(connection, destinationTableName);
            try
            {
                string query = GetInsertOrUpdateMergeQuery<T>(destinationTableName, tempTableName, bulkOptions);
                bulkOptions.DestinationTableName = tempTableName;
                connection.ExecuteBulkCommand(items, query, bulkOptions);
            }
            finally
            {
                DropTempTable(connection, tempTableName);
            }
        }

        public static async Task BulkInsertOrUpdateSqlServerAsync<T>(this SqlConnection connection, ICollection<T> items, UpdateBulkOptions bulkOptions)
        {
            if (!items.Any())
            {
                return;
            }
            string destinationTableName = !string.IsNullOrWhiteSpace(bulkOptions.DestinationTableName) ? bulkOptions.DestinationTableName : typeof(T).GetTableName();
            string tempTableName = await CreateTempTableAsync(connection, destinationTableName);
            try
            {
                string query = GetInsertOrUpdateMergeQuery<T>(destinationTableName, tempTableName, bulkOptions);
                bulkOptions.DestinationTableName = tempTableName;
                await connection.ExecuteBulkCommandAsync(items, query, bulkOptions);
            }
            finally
            {
                await DropTempTableAsync(connection, tempTableName);
            }
        }

        private static string GetInsertOrUpdateMergeQuery<T>(string destinationTableName, string tempTableName, UpdateBulkOptions bulkOptions)
        {
            return MergeQueryBuilder
                .StartBuilding()
                .SetColumnNames(typeof(T).GetColumnNames())
                .SetDestinationTable(destinationTableName)
                .SetSourceTable(tempTableName)
                .SetMatchOn(bulkOptions.MatchOnColumnNames)
                .SetCustomMatchExpression(bulkOptions.CustomMergeCondition)
                .UseInsert()
                .Build();
        }

        public static void BulkInsertOrUpdateOrDeleteSqlServer<T>(this SqlConnection connection, ICollection<T> items, UpdateBulkOptions bulkOptions)
        {
            string destinationTableName = !string.IsNullOrWhiteSpace(bulkOptions.DestinationTableName) ? bulkOptions.DestinationTableName : typeof(T).GetTableName();
            string tempTableName = CreateTempTable(connection, destinationTableName);
            try
            {
                string query = GetInsertOrUpdateOrDeleteQuery<T>(destinationTableName, tempTableName, bulkOptions);
                bulkOptions.DestinationTableName = tempTableName;
                connection.ExecuteBulkCommand(items, query, bulkOptions);
            }
            finally
            {
                DropTempTable(connection, tempTableName);
            }
        }

        public static async Task BulkInsertOrUpdateOrDeleteSqlServerAsync<T>(this SqlConnection connection, ICollection<T> items, UpdateBulkOptions bulkOptions)
        {
            string destinationTableName = !string.IsNullOrWhiteSpace(bulkOptions.DestinationTableName) ? bulkOptions.DestinationTableName : typeof(T).GetTableName();
            string tempTableName = await CreateTempTableAsync(connection, destinationTableName);
            try
            {
                string query = GetInsertOrUpdateOrDeleteQuery<T>(destinationTableName, tempTableName, bulkOptions);
                bulkOptions.DestinationTableName = tempTableName;
                await connection.ExecuteBulkCommandAsync(items, query, bulkOptions);
            }
            finally
            {
                await DropTempTableAsync(connection, tempTableName);
            }
        }

        private static string GetInsertOrUpdateOrDeleteQuery<T>(string destinationTableName, string tempTableName, UpdateBulkOptions bulkOptions)
        {
            return MergeQueryBuilder
                    .StartBuilding()
                    .SetColumnNames(typeof(T).GetColumnNames())
                    .SetDestinationTable(destinationTableName)
                    .SetSourceTable(tempTableName)
                    .SetMatchOn(bulkOptions.MatchOnColumnNames)
                    .SetCustomMatchExpression(bulkOptions.CustomMergeCondition)
                    .UseInsert()
                    .UseDelete()
                    .Build();
        }

        private static void ExecuteBulkCommand<T>(this SqlConnection connection, ICollection<T> items, string query, UpdateBulkOptions bulkOptions)
        {
            InputValidator.ValidateItems(items);
            if (bulkOptions == null)
            {
                bulkOptions = new UpdateBulkOptions();
            }
            connection.BulkInsertSqlServer(items.ToArray(), bulkOptions: bulkOptions);
            connection.ExecuteNonQuery(query);
        }

        private static async Task ExecuteBulkCommandAsync<T>(this SqlConnection connection, ICollection<T> items, string query, UpdateBulkOptions bulkOptions)
        {
            InputValidator.ValidateItems(items);
            if (bulkOptions == null)
            {
                bulkOptions = new UpdateBulkOptions();
            }
            await connection.BulkInsertSqlServerAsync(items.ToArray(), bulkOptions: bulkOptions);
            await connection.ExecuteNonQueryAsync(query);
        }

        private static string CreateTempTable(this SqlConnection connection, string originalTableName)
        {
            string tempTableName = GetTempTableName(originalTableName);
            string tempTableQuery = GetCreateTempTableQuery(tempTableName, originalTableName);
            connection.ExecuteNonQuery(tempTableQuery);
            return tempTableName;
        }

        private static async Task<string> CreateTempTableAsync(this SqlConnection connection, string originalTableName)
        {
            string tempTableName = GetTempTableName(originalTableName);
            string tempTableQuery = GetCreateTempTableQuery(tempTableName, originalTableName);
            await connection.ExecuteNonQueryAsync(tempTableQuery);
            return tempTableName;
        }

        private static string GetTempTableName(string originalTableName)
        {
            return $"{originalTableName}_SQLBulk_Temp_{ Guid.NewGuid().ToString().Replace("-", "")}";
        }

        private static string GetCreateTempTableQuery(string tempTableName, string originalTableName)
        {
            return $@"
SELECT * INTO {tempTableName} FROM {originalTableName} WHERE 1=0; 
IF EXISTS(
    SELECT Object_Name([object_id]) AS [TableName]
        ,[name] AS [ColumnName]
        ,is_identity
    FROM sys.columns
    WHERE is_identity=1 AND Object_Name([object_id]) = '{tempTableName}')
BEGIN
    SET IDENTITY_INSERT {tempTableName} ON;
END;";
        }

        private static void DropTempTable(this SqlConnection connection, string tempTableName)
        {
            string tempTableQuery = $"DROP TABLE {tempTableName}";
            connection.ExecuteNonQuery(tempTableQuery);
        }

        private static Task DropTempTableAsync(this SqlConnection connection, string tempTableName)
        {
            string tempTableQuery = $"DROP TABLE {tempTableName}";
            return connection.ExecuteNonQueryAsync(tempTableQuery);
        }

        private static void ExecuteNonQuery(this SqlConnection connection, string query)
        {
            using (var command = connection.CreateCommand())
            {
                command.CommandType = CommandType.Text;
                command.CommandText = query;
                command.ExecuteNonQuery();
            }
        }

        private static Task ExecuteNonQueryAsync(this SqlConnection connection, string query)
        {
            using (var command = connection.CreateCommand())
            {
                command.CommandType = CommandType.Text;
                command.CommandText = query;
                return command.ExecuteNonQueryAsync();
            }
        }

        private static SqlBulkCopy GetNewSqlBulkCopy(SqlConnection connection, string destinationTableName, int timeout)
        {
            return new SqlBulkCopy(connection, SqlBulkCopyOptions.KeepIdentity | SqlBulkCopyOptions.UseInternalTransaction, null)
            {
                DestinationTableName = destinationTableName,
                BulkCopyTimeout = timeout,
            };
        }
    }
}
